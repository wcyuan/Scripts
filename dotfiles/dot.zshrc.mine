# -*- mode: sh -*-
#
# This is meant to go at the end of the standard zshrc that oh-my-zsh
# creates for you.
#


# Your oh-my-zsh created zshrc file should have this line:
#    source $ZSH/oh-my-zsh.sh
# But oh-my-zsh completion is super slow.  If you want to
# get rid of oh-my-zsh, you should not source oh-my-zsh.sh
# and just figure out what parts you need.  At very least,
# I like these:
#    source $ZSH/lib/git.zsh
#    source $ZSH/lib/theme-and-appearance.zsh
#    source $ZSH/themes/wcy.zsh-theme
#    compdef _dirs cd

# Pass unmatched globs to the command
#
# http://stackoverflow.com/questions/20037364/why-zsh-tries-to-expand-and-bash-does-not
setopt nonomatch

# ----------------------------------------------------------------------------
# Set up history
export HISTSIZE=15000
export SAVEHIST=10000
export HISTFILE=~/.zsh_history
# Add time/date stamps to history
export HIST_STAMPS="yyyy-mm-dd"

# inc_append_history and share_history seem to make it so that up-arrow on
# any shell will see every command you've run in any shell.  I want the recent
# histories of different shells to be independent, but I want to be able to
# easily search the histories of all shells.

# from man zshoptions:
# APPEND_HISTORY
#              If this is set, zsh sessions will append their history
#              list to the history file, rather than replace it. Thus,
#              multiple parallel zsh sessions will all have the new
#              entries from their history lists added to the history
#              file, in the order that they exit.  The file will still
#              be periodically re-written to trim it when the number
#              of lines grows 20% beyond the value specified by $SAVE‚Äê
#              HIST (see also the HIST_SAVE_BY_COPY option).
setopt append_history

# INC_APPEND_HISTORY
#
#              This options works like APPEND_HISTORY except that new
#              history lines are added to the $HISTFILE incrementally
#              (as soon as they are entered), rather than waiting until
#              the shell exits.  The file will still be periodically
#              re-written to trim it when the number of lines grows 20%
#              beyond the value specified by $SAVEHIST (see also the
#              HIST_SAVE_BY_COPY option).
unsetopt inc_append_history

# SHARE_HISTORY
#
#              This option both imports new commands from the history
#              file, and also causes your typed commands to be
#              appended to the history file (the latter is like
#              specifying INC_APPEND_HISTORY, which should be turned
#              off if this option is in effect).  The history lines
#              are also output with timestamps ala EXTENDED_HISTORY
#              (which makes it easier to find the spot where we left
#              off reading the file after it gets re-written).
#
#              By default, history movement commands visit the
#              imported lines as well as the local lines, but you can
#              toggle this on and off with the set-local-history zle
#              binding.  It is also possible to create a zle widget
#              that will make some commands ignore imported commands,
#              and some include them.
#
#              If you find that you want more control over when
#              commands get imported, you may wish to turn
#              SHARE_HISTORY off, INC_APPEND_HISTORY or
#              INC_APPEND_HISTORY_TIME (see above) on, and then
#              manually import commands whenever you need them using
#              `fc -RI'.
unsetopt share_history
# ----------------------------------------------------------------------------

# By default, meta-F in zsh does forward-word, which goes to the
# beginning of the next word. I prefer emacs-forward-word, which
# goes to the end of the current word (then the end of the next
# word, etc).
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
bindkey 'F' emacs-forward-word
bindkey 'f' emacs-forward-word
bindkey '[1;5C' emacs-forward-word


# Make zsh's control-u the same as bash's.  That is, make it do
# backward-kill-line, which deletes all the characters on this line
# from the beginning to the cursor,  but leave the characters after
# the cursor.  By default, it does kill-whole-line, which removes
# everything on the line.
#
# http://stackoverflow.com/questions/3483604/which-shortcut-in-zsh-does-the-same-as-ctrl-u-in-bash
#
# "man zshzle" for more information about zsh command line editor
#
# if you just run bindkey by itself, it will list all keybindings
bindkey \^U backward-kill-line

# I want backward-kill-word to stop at directory delimiters
# It works that way if you use oh-my-zsh, but if you don't,
# you need to set these separately.
#
# http://stackoverflow.com/questions/444951/zsh-stop-backward-kill-word-on-directory-delimiter
autoload -U select-word-style
select-word-style bash
# that works for backwards, but not forwards, maybe emacs-forward-word
# doesn't respect it?
export WORDCHARS=""

alias sa='unalias -m "*"; source ~/.zshrc'

if [ -r ~/.bashzsh ]
then
  source ~/.bashzsh
fi

# -*- mode: sh -*-
#
# A place for code to be loaded in both bash and zsh
#
#

# ----------------------------------------------------
# Environment
#

# python
export PYTHONPATH=$HOME/usr/python

# less
# use a verbose prompt
export LESS='-M'

# turn off cygwin xemacs warning
export nodosfilewarning=1


# ----------------------------------------------------
# aliases and functions
#

alias      rm='rm -i'
alias      cp='cp -i'
alias      mv='mv -i'
alias       l='ls -lF'
alias      la='ls -alF'
alias     lsd='ls -dlF'
alias     ltr='ls -lrt'
alias     lss='ls -Shr' # sort by human-readable file size ascending

# for using windows python from cygwin, ipython has to be started like this:
# http://stackoverflow.com/questions/3250749/using-windows-python-from-cygwin
alias ipython='PYTHONUNBUFFERED=1 python c:/cygwin/home/Yuan/usr/pkgs/ipython-0.12/ipython.py'
alias     irb='/cygdrive/c/Ruby193/bin/irb.bat --prompt default'

alias    node='/cygdrive/c/Program\ Files/nodejs/node.exe'
alias     npm="/cygdrive/c/Program\ Files/nodejs/node.exe 'C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js'"
alias webserver="python -m SimpleHTTPServer"

alias tophonors='cd "/cygdrive/c/Users/Yuan/Dropbox/Top Honors Pairing"'

#
# ps BSD-style options
#
# u   = user format (shows username)
# www = wide format (shows as many arguments as it can)
# x   = show process that aren't attached to a terminal.  this has
#       the effect of always showing the processes of the current
#       user, even if you add a -U or -u option
# f   = forest view: show ascii art representation of process tree
#
# to show sps for another user, try 'ps uwwwf -u <username> -U <username>'
# or, if you do 'sps -u <user>' it'll work, but you'll see
# processes for yourself and for <user>
#
alias     sps='ps uxwwwf'

gitall() {
    cmd="$@"
    if [[ $cmd == "" ]]
    then
        cmd='cherry -v'
    fi
    for d in ~/code/github/* ~/code/*
    do
      if [ -d $d ]
      then
          if [[ $d =~ /(github|projectlocker)$ ]]
          then
              :
          else
              echo " -- $d"
              (cd $d ; git $cmd)
          fi
      fi
    done
}

aws() {
    default_host='ec2-184-72-254-238.compute-1.amazonaws.com'

    if [ "$1" = "-v" ]
    then
        vncopt="-L *:9000:localhost:5901"
        shift
    else
        vncopt=""
    fi

    # e.g. ec2-23-22-197-139.compute-1.amazonaws.com
    host=$1

    if [ "$#" -lt 1 ]
    then
        if [ "$default_host" != "" ]
        then
            host=$default_host
            echo "Using default host $host"
        else
            echo "ERROR: No default host, need an IP" > /dev/stderr
            return 1
        fi
    elif [ "$#" -gt 1 ]
    then
        echo "Too many args: $*" > /dev/stderr
        return 1
    fi
    ssh $vncopt -i ~/code/aws/startup.pem ubuntu@$host
}

sshbash() {
    # ssh -t gives you a terminal
    # bash -i gives you interactive mode
    ssh -t $* bash -i
}

# grep
alias       grep='grep --color'
alias      egrep='egrep --color'
# -H forces printing of the file name, even if there is only one file
alias      xgrep='xargs -d"\n" grep -H --color'
alias     xegrep='xargs -d"\n" egrep -H --color'
# Should use ack instead?
alias   findgrep='find . -name .svn -prune -name .git -prune -o -type f -print0 | xargs -0 grep -H --color'
# Is this a dos style file or a unix style file?  Are the newlines
# just CR (\n) or are the CRLF (\n\r)?  Returns 0 for a unix-style
# file and non-zero for a dos-style file
alias      isdos="\grep -c '
$'"

# find
alias   findtext='find . -name .svn -prune -name .git -prune -o -type f -print'
alias   findpath='find . $path -type f'
findname() {
    pattern="$*"
    find . -iname "*$pattern*" | grep -i "$pattern"
}

# rarely used

# The characters that look like ^N and ^O
# are vt100 control sequences.  To generate
# them in emacs, do:
# ^N = Control-Q Control-N
# ^O = Control-Q Control-O
alias   ruinterm="echo -n "
alias    fixterm="echo -n "
alias        hex='printf "%x\n"'
alias       beep='perl -e "print \"\a\";"'
alias        fep=rlwrap

pynotebook() {
    #cd ~/notebook-directory
    ipython notebook --pylab=inline --no-browser --ip="*"
}

embolden() {
    # Takes one argument, which is a pattern.
    #
    # Passes through stdin, but highlights the pattern in bold red.
    #
    # terminal colors are specified as "1;31"
    # 1 means bold
    # 31 means red
    sed "s/\($1\)/[1;31m\1[m/g"
}

winpath() {
    cygpath --windows `which $*`
}

python27() {
    cmd=`winpath $1`
    shift
    /cygdrive/c/Python27/python $cmd $*
}

